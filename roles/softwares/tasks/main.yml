---
# tasks file for softwares
- name: "Get {{ item.name }} Script"
  ansible.builtin.get_url:
    url: "{{ item.script }}"
    dest: "{{ item.dest }}"
    mode: "{{ item.mode }}"
  loop: "{{ curl_packages }}" 

- name: "Install {{ item.name }}"
  command: "bash {{ item.dest }}"
  loop: "{{ curl_packages }}"

- name: Install Jenkins repo
  block:
    - name: Jenkins repo | no apt key
      ansible.builtin.get_url:
        url: https://pkg.jenkins.io/debian-stable/jenkins.io.key
        dest: /usr/share/keyrings/jenkins-keyring.asc

    - name: Jenkins repo | apt source
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian-stable binary/"
        state: present
      become: yes

- name: Install apt packages
  ansible.builtin.apt:
    name: "{{ item }}"
    state: "present"
  loop: "{{ apt_packages }}"
  become: yes

- name: Get the deb package
  ansible.builtin.get_url:
    url: "{{ item.url }}" 
    dest: "{{ item.dest }}"
    mode: '0755'
  loop: "{{ deb_packages }}"


- name: Install the deb package
  ansible.builtin.apt:
    deb: "{{ item.dest }}"
  loop: "{{ deb_packages }}"
  become: yes

 
- name: "Installing {{ item }} packages"
  community.general.snap:
    name: "{{ item.name }}"
    classic: "{{ item.classic }}"
  loop: "{{ snap_packages }}"
  become: yes
  notify: started microk8s

- name: Enable microk8s plugins
  command: "microk8s enable {{ item }}"
  loop: "{{ microk8s_plugins }}"
 
- name: Install new code extensions
  command: "code --install-extension {{ item }}"
  loop: "{{ vscode_extension_ids  }}"

- name: Install Jenkins Plugins
  community.general.jenkins_plugin:
    name: "{{ item }}"
    force_basic_auth: true
    url_username: "{{ jenkins_username }}"
    url_password: "{{ jenkins_password }}"
    state: latest
  register: jenkins_plugins_latest
  loop: "{{ jenkins_plugin_list }}"
  become: yes

- name: Check if restart is required by any of the unversioned plugins
  ansible.builtin.set_fact:
    jenkins_restart_required: true
  when: item.changed
  loop: "{{ jenkins_plugins_latest.results }}"

- name: Restart Jenkins if required
  ansible.builtin.service:
    name: jenkins
    state: restarted
  when: jenkins_restart_required
  become: yes

- name: Wait for Jenkins to start up
  ansible.builtin.uri:
    url: http://localhost:8080
    status_code: 200
    timeout: 5
    force_basic_auth: true
    url_username: "{{ jenkins_username }}"
    url_password: "{{ jenkins_password }}"
  register: jenkins_service_status
      # Keep trying for 5 mins in 5 sec intervals
  retries: 60
  delay: 5
  until: >
       'status' in jenkins_service_status and
        jenkins_service_status['status'] == 200
  when: jenkins_restart_required
